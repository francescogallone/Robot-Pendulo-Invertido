#include <Wire.h>
//Variables necesarias para el control de los motores
// Pines de conexión al driver L298N
const int enA = 25;   // Pin Enable A (control de velocidad PWM)
const int in1 = 27;   // Pin de entrada 1 para el motor A
const int in2 = 26;   // Pin de entrada 2 para el motor A
const int enB = 13;   // Pin Enable A (control de velocidad PWM)
const int in3 = 33;   // Pin de entrada 1 para el motor A
const int in4 = 32;   // Pin de entrada 2 para el motor A
// Definición de zonas muertas
const int A_FW_DEADZONE = 215;
const int A_BW_DEADZONE = 185;
const int B_FW_DEADZONE = 155;
const int B_BW_DEADZONE = 185;
// Rango máximo de PWM útil
const int PWM_MAX = 255;

//Variables necesarias para usar el MPU6050
// Dirección I2C del MPU6050
const int MPU6050_ADDR = 0x68;
// Valores de offset y factor de escala obtenidos en la calibración
float accelOffsetX = 339.92;
float accelOffsetY = -48.66;
float accelOffsetZ = 1072.10;
float accelScaleFactorX = -1.00;
float accelScaleFactorY = -1.00;
float accelScaleFactorZ = -1.01;
// Variables para almacenar las lecturas del sensor (calibradas)
float accelXCal, accelYCal, accelZCal;
float gyroX, gyroY, gyroZ;

// Variables para el filtro de Kalman (simplificado para el ángulo de cabeceo - pitch)
float pitch = 0;       // Ángulo de cabeceo estimado
float pitchRate = 0;   // Velocidad angular de cabeceo medida
float kalmanGain = 0.5; // Ganancia del filtro de Kalman (ajustar este valor)
float anguloPitchFiltrado = 0;


// Tiempo transcurrido entre lecturas
unsigned long previousTime = 0;
float deltaTime;
long TsMicroSegundos = 10000;
float TsSegundos = 0.01; // Corrección: 10000 microsegundos = 0.01 segundos


// Variables globales para la implentación del PID
float P = 0; // Acción Proporcional
float I = 0; // Acción Integral
float D = 0; // Acción Derivativa
float r = 0.0; // Set point (ángulo objetivo: vertical = 0 grados)
float y = 0;   // Estado actual (ángulo filtrado)
float u = 0;   // Salida del PID
static float u_filtrado = 0;
float ek = 0;  //Error

// Parámetros PID
float Kp = 9.5;
float Ki = 0.3;
float Kd = 0.15;

// Límites integral
float I_min = -20.0;
float I_max = 20.0;

// Límites salida PID
const float u_min = -75.0;
const float u_max = 75.0;  // Ajusta según observación real
// Variables estáticas PID
static float Ikplus1 = 0;
static float yk_1 = 0;



// Función para inicializar el MPU6050
bool initMPU6050() {
  Wire.beginTransmission(MPU6050_ADDR);
  Wire.write(0x6B); // Registro de Power Management 1
  Wire.write(0);    // Desactivar el modo de sleep
  if (Wire.endTransmission() != 0) {
    Serial.println("Error al inicializar el MPU6050");
    return false;
  }
  // Configurar el giroscopio (opcional)
  Wire.beginTransmission(MPU6050_ADDR);
  Wire.write(0x1B); // Registro de Configuración del Giroscopio
  Wire.write(0x00); // Rango de ±250 °/s
  Wire.endTransmission();

  // Configurar el acelerómetro (opcional)
  Wire.beginTransmission(MPU6050_ADDR);
  Wire.write(0x1C); // Registro de Configuración del Acelerómetro
  Wire.write(0x00); // Rango de ±2g
  Wire.endTransmission();

  delay(100);
  return true;
}
// Función para leer los datos del MPU6050 y aplicar la calibración
void leerSensoresCalibrados() {
  Wire.beginTransmission(MPU6050_ADDR);
  Wire.write(0x3B); // Registro del primer byte de la aceleración
  Wire.endTransmission(false);
  Wire.requestFrom(MPU6050_ADDR, 6, true);
  int16_t rawAccelX = (Wire.read() << 8) | Wire.read();
  int16_t rawAccelY = (Wire.read() << 8) | Wire.read();
  int16_t rawAccelZ = (Wire.read() << 8) | Wire.read();

  accelXCal = (rawAccelX - accelOffsetX) / 16384.0 * accelScaleFactorX;
  accelYCal = (rawAccelY - accelOffsetY) / 16384.0 * accelScaleFactorY;
  accelZCal = (rawAccelZ - accelOffsetZ) / 16384.0 * accelScaleFactorZ;

  Wire.beginTransmission(MPU6050_ADDR);
  Wire.write(0x43); // Registro del primer byte de la velocidad angular
  Wire.endTransmission(false);
  Wire.requestFrom(MPU6050_ADDR, 6, true);
  int16_t rawGyroX = (Wire.read() << 8) | Wire.read();
  int16_t rawGyroY = (Wire.read() << 8) | Wire.read();
  int16_t rawGyroZ = (Wire.read() << 8) | Wire.read();

  gyroX = rawGyroX / 131.0;
  gyroY = rawGyroY / 131.0;
  gyroZ = rawGyroZ / 131.0;
}


// Función para leer los datos del MPU6050 y aplicar un filtro de Kalman simplificado (con lecturas calibradas)
float obtenerPitchFiltradoCalibrado() {
  leerSensoresCalibrados();

  unsigned long currentTime = millis();
  deltaTime = (currentTime - previousTime) / 1000.0;
  previousTime = currentTime;

  pitch = pitch + gyroY * deltaTime;

  float accelPitch = atan2(accelXCal, sqrt(accelYCal * accelYCal + accelZCal * accelZCal)) * 180 / PI;

  pitch = kalmanGain * (pitch + gyroY * deltaTime) + (1 - kalmanGain) * accelPitch;

  return pitch;
}

float MovingAverage(float nuevoValor){
	// Filtro Moving Averange implementado con buffer circular

	const long buffersize=11;					// Tama o del Buffer. El tama o utilizable es n-1, por los  ndices.
	static float buffer[buffersize]={0};			// Buffer
	static long indexentrante=1;				// Indice que apunta al valor entrante
	static long indexsaliente=indexentrante+1;	// Indice que apunta al valor saliente. Debe estar adelante de indexentrante
	static float suma=0;						// valor donde se suma el contenido del buffer.
	
	
	// Carga del nuevo valor y actualizaci n del  ndice.
	buffer[indexentrante]=nuevoValor;
	suma=suma+buffer[indexentrante]-buffer[indexsaliente];
	
	indexentrante==(buffersize-1)? indexentrante=0 : indexentrante++;
	indexsaliente==(buffersize-1)? indexsaliente=0 : indexsaliente++;
	return suma/(buffersize-1);

}

void PID(float r, float y, float TsSegundos, float &u) {
  float ek = r - y;

  // Limitar error para evitar saturación excesiva (opcional)
  float errorMax = 15.0;
  if (ek > errorMax) ek = errorMax;
  else if (ek < -errorMax) ek = -errorMax;

  float P = Kp * ek;
  float D = -Kd * (y - yk_1) / TsSegundos;
  D = MovingAverage(D);
  D = constrain(D, -10, 10);

  float u_unsat = P + Ikplus1 + D;

  bool saturado_alto = (u_unsat > u_max);
  bool saturado_bajo = (u_unsat < u_min);

  if (!saturado_alto && !saturado_bajo) {
    Ikplus1 += Ki * ek * TsSegundos;
    Ikplus1 = constrain(Ikplus1, I_min, I_max);
  } else {
    if (saturado_alto && ek < 0) {
      Ikplus1 += Ki * ek * TsSegundos;
      Ikplus1 = constrain(Ikplus1, I_min, I_max);
    } else if (saturado_bajo && ek > 0) {
      Ikplus1 += Ki * ek * TsSegundos;
      Ikplus1 = constrain(Ikplus1, I_min, I_max);
    }
  }

  u = P + Ikplus1 + D;
  u_filtrado = 0.8 * u_filtrado + 0.2 * u;
  u = u_filtrado;
  u = constrain(u, u_min, u_max);
  yk_1 = y;
}

void moverMotores(float u) {
  int pwmA = 0, pwmB = 0;
  bool forward = (u > 0);
  float uAbs = abs(u);

  // Mapear para Motor A
  if (forward) {
    if (uAbs < 1) pwmA = 0;
    else pwmA = map(uAbs, 0, u_max, A_FW_DEADZONE, PWM_MAX);
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
  } else {
    if (uAbs < 1) pwmA = 0;
    else pwmA = map(uAbs, 0, u_max, A_BW_DEADZONE, PWM_MAX);
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
  }

  // Mapear para Motor B
  if (forward) {
    if (uAbs < 1) pwmB = 0;
    else pwmB = map(uAbs, 0, u_max, B_FW_DEADZONE, PWM_MAX);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
  } else {
    if (uAbs < 1) pwmB = 0;
    else pwmB = map(uAbs, 0, u_max, B_BW_DEADZONE, PWM_MAX);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
  }

  pwmA = constrain(int(pwmA*1.05), 0, 255);
  pwmB = constrain(pwmB, 0, 255);

  analogWrite(enA, pwmA);
  analogWrite(enB, pwmB);
}

void setup() {

    // Configura los pines como salidas
  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  // Inicializa el motor detenido
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  analogWrite(enB, 0); // 0% de velocidad

    // Inicializa el motor detenido
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  analogWrite(enA, 0); // 0% de velocidad

  Serial.begin(115200);
  Wire.begin();
  Wire.setClock(400000);

  if (initMPU6050()) {
    Serial.println("MPU6050 inicializado correctamente");
  } else {
    Serial.println("Falló la inicialización del MPU6050");
    while (1);
  }

  previousTime = millis();
}

void loop() {
  anguloPitchFiltrado = obtenerPitchFiltradoCalibrado();
  y = anguloPitchFiltrado; // El ángulo filtrado es el estado actual para el PID

  PID(r, y, TsSegundos, u);
  moverMotores(u);

  delay(20);
}
